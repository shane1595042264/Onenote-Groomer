import 'lib/services/onenote_service.dart';
import 'lib/services/ollama_service.dart';
import 'lib/services/excel_service.dart';

void main() async {
  print('Testing generic data extraction...');
  
  final oneNoteService = OneNoteService();
  final ollamaService = OllamaService();
  final excelService = ExcelService();
  
  try {
    // Load business data
    final pages = await oneNoteService.readOneNoteFile('June 2025.one');
    print('Loaded ${pages.length} pages');
    
    // Show the first page content to see the generic structure
    if (pages.isNotEmpty) {
      print('\n=== Sample Extracted Content (Generic Structure) ===');
      final content = pages.first.content;
      final previewLength = content.length > 500 ? 500 : content.length;
      print(content.substring(0, previewLength));
      if (content.length > 500) print('...');
    }
    
    // Test with multiple pages
    final testPages = pages.take(3).toList();
    
    // Use your exact custom prompt
    const customPrompt = '''Extract business data from OneNote pages. Focus on:
- Company/Client name
- Date and time information
- Key decisions or actions
- Financial information
- Contact details
- Status or outcomes
- Any follow-up items''';
    
    print('\n=== Processing with Custom Prompt ===');
    
    // Process WITHOUT template (null)
    final processedData = await ollamaService.processPages(
      testPages,
      null,  // No template - use custom prompt
      customPrompt,
    );
    
    print('Processed ${processedData.length} pages');
    
    // Analyze the field structure
    final allFields = <String>{};
    for (final pageData in processedData) {
      for (final field in pageData.keys) {
        if (field != 'page_title' && field != 'source_file') {
          allFields.add(field);
        }
      }
    }
    
    print('\n=== Field Structure Analysis ===');
    print('Total unique fields: ${allFields.length}');
    print('Fields generated by AI:');
    for (final field in allFields) {
      print('  - $field');
    }
    
    // Check if fields are clean and match the prompt
    final hasGenericFields = allFields.any((f) => f.contains('Underwriter') || f.contains('Broker'));
    print('\n=== Generic Field Check ===');
    if (hasGenericFields) {
      print('❌ Still contains specific insurance terms');
    } else {
      print('✅ Fields are generic and match the custom prompt');
    }
    
    // Create Excel file
    await excelService.writeExcelFile('test_generic_extraction.xlsx', processedData, null);
    print('\n=== Excel File Created ===');
    print('File: test_generic_extraction.xlsx');
    print('Check this file to verify columns are clean and generic!');
    
  } catch (e) {
    print('❌ Error: $e');
  } finally {
    oneNoteService.dispose();
    ollamaService.dispose();
  }
}
